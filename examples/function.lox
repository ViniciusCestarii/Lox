fun count(n) {
  if (n > 1) count(n - 1);
  print n;
}

count(3); // 1 2 3

fun sayHi(first, last) {
  print "Hi, " + first + " " + last + "!";
}

sayHi("Dear", "Reader"); // Hi, Dear Reader!

print "Return test:";

fun count(n) {
  while (n < 100) {
    if (n == 3) return n; // <--
    print n;
    n = n + 1;
  }
}

print "end: " + count(1);

print "Fibonacci sequence:";

var startFibTimer = clock();

fun fib(n) {
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

for (var i = 0; i < 30; i = i + 1) {
  print fib(i);
}

print "fib took " + (clock() - startFibTimer) + "s";

print "Closure test:";

fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();
counter(); // "1".
counter(); // "2".

print "Persistent environments test:";

// A block is not necessarily all the same scope.

var a = "global";
{
  fun showA() {
    print a;
  }

  showA(); // "global"
  var a = "block";
  showA(); // should print "global"
}